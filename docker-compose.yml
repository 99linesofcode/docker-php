services:
  # frankenphp: # PHP 8.2+
  #   build:
  #     context: .
  #     dockerfile: docker/frankenphp/Dockerfile
  #   environment:
  #     - XDEBUG_MODE=${PHP_XDEBUG_MODE:-off}
  #     - XDEBUG_CONFIG=${PHP_XDEBUG_CONFIG:-client_host=host.docker.internal output_dir=/tmp/xdebug profiler_output_name=cachegrind.out.%R.%u}
  #   depends_on:
  #     - meilisearch
  #     - mysql
  #     - redis
  #     - soketi
  #   volumes:
  #     - .:/app
  #     - $HOME/Development/profiling/${APP_NAME}:/tmp/xdebug # mount xdebug and cachegrind output for profiling analysis on host machine

  mailpit:
    container_name: ${APP_NAME}-mailpit
    image: axllent/mailpit:latest
    ports:
      - ${FORWARD_MAILPIT_PORT:-1025}:1025
      - ${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025
    healthcheck:
      test: ["CMD", "curl", "-Ss", "http://localhost:8025/livez"]
      retries: 3
      timeout: 5s

  meilisearch:
    container_name: ${APP_NAME}-meilisearch
    image: getmeili/meilisearch:latest
    ports:
      - ${FORWARD_MEILISEARCH_PORT:-7700}:7700
    volumes:
      - meilisearch:/meili_data
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--spider",
          "http://localhost:7700/health",
        ]
      retries: 3
      timeout: 5s

  mysql:
    extends:
      file: ./docker/base/docker-compose.yml
      service: mysql
    volumes:
      - mysql:/var/lib/mysql
      # - $HOME/dbdump.sql:/docker-entrypoint-initdb.d/dbdump.sql # dbdump.sql is read on init and can be used to prepopulate the db

  nginx:
    image: lscr.io/linuxserver/nginx:1.26.3 # PHP 8.1
    container_name: ${APP_NAME}-nginx
    environment:
        - PUID=${PUID:-1000}
        - PGID=${PGID:-1000}
        - TZ=${TIMEZONE:-Europe/Amsterdam}
    depends_on:
      - meilisearch
      - mysql
      - redis
      - soketi
    volumes:
      - $HOME/.config/${APP_NAME}:/config
      - .:/app/www
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped

  phpmyadmin:
    extends:
      file: ./docker/base/docker-compose.yml
      service: phpmyadmin
    depends_on:
      - mysql

  redis:
    extends:
      file: ./docker/base/docker-compose.yml
      service: redis
    volumes:
      - redis:/data

  soketi:
    container_name: ${APP_NAME}-soketi
    image: quay.io/soketi/soketi:latest
    environment:
      - SOKETI_DEBUG=${SOKETI_DEBUG:-1}
      - SOKETI_METRICS_SERVER_PORT=${SOKETI_METRICS_SERVER_PORT:-9601}
      - SOKETI_DEFAULT_APP_ID=${PUSHER_APP_ID}
      - SOKETI_DEFAULT_APP_KEY=${PUSHER_APP_KEY}
      - SOKETI_DEFAULT_APP_SECRET=${PUSHER_APP_SECRET}
    ports:
      - ${PUSHER_FRONTEND_PORT:-6001}:6001
      - ${PUSHER_METRICS_PORT:-9601}:9601

  # webgrind:
  #   container_name: ${APP_NAME}-webgrind
  #   image: jokkedk/webgrind:latest
  #   ports:
  #     - ${FORWARD_WEBGRIND_PORT:-8080}:80
  #   volumes:
  #     - $HOME/Development/profiling/${APP_NAME}:/tmp

volumes:
  meilisearch:
    name: ${APP_NAME}-vol-meilisearch
    driver: local
  mysql:
    name: ${APP_NAME}-vol-mysql
    driver: local
  redis:
    name: ${APP_NAME}-vol-redis
    driver: local

networks:
  default:
    name: "${APP_NAME}-net"
    driver: bridge
